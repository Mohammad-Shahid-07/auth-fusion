{
  "name": "SecurityContent",
  "files": [
    {
      "name": "SecurityContent.tsx",
      "content": "\"use client\";\r\n//[imports]\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { SetPasswordSchema } from \"@/validations\";\r\nimport { useMessageHandler } from \"../auth/useMessageHandler\";\r\nimport { changePassword, setNewPassword } from \"@/actions/user.actions\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport * as z from \"zod\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\nFormDescription,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport { FormError } from \"@/components/auth/FormError\";\r\nimport { FormSuccess } from \"@/components/auth/FormSuccess\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { usePathname } from \"next/navigation\";\r\nimport Loader from \"@/components/auth/Loader\";\r\nconst SecuityContent = () => {\r\n  const [user, setUser] = useState<any>({});\r\n  const [isPending, setIsPending] = useState(false);\r\n  const [error, setError] = useState<string>(\"\");\r\n  const [success, setSuccess] = useState<string>(\"\");\r\n  const [type, setType] = useState(\"\");\r\n    useMessageHandler(\r\n    error,\r\n    success,\r\n    setError,\r\n    setSuccess,\r\n    Date.now().toLocaleString(),\r\n  );\r\n\r\n  useEffect(() => {\r\n    fetch(\"/api/user\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setUser(data);\r\n        if (data.password) {\r\n          setType(\"Change Password\");\r\n        } else {\r\n          setType(\"New Password\");\r\n        }\r\n        setIsPending(false);\r\n      });\r\n  }, []);\r\n\r\n  const form = useForm<z.infer<typeof SetPasswordSchema>>({\r\n    resolver: zodResolver(SetPasswordSchema),\r\n    defaultValues: {\r\n      oldPassword: undefined,\r\n      newPassword: \"\",\r\n      confirmNewPassword: \"\",\r\n    },\r\n  });\r\n\r\n  async function onSubmit(values: z.infer<typeof SetPasswordSchema>) {\r\n    try {\r\n      setIsPending(true);\r\n      setSuccess(\"\");\r\n      setError(\"\");\r\n\r\n      if (type === \"New Password\") {\r\n        if (values.newPassword === values.confirmNewPassword) {\r\n          await setNewPassword(values)\r\n            .then((res: any) => {\r\n              if (res?.error) {\r\n                setError(res.error);\r\n              }\r\n              if (res?.success) {\r\n                setSuccess(res.success);\r\n              }\r\n            })\r\n            .catch(() => {\r\n              setError(\"Something Went Wrong\");\r\n            });\r\n        } else {\r\n          setError(\"Passowrd Do Not Match\");\r\n        }\r\n      } else if (type === \"Change Password\") {\r\n        if (values.newPassword === values.confirmNewPassword) {\r\n          await changePassword(values)\r\n            .then((res: any) => {\r\n              if (res?.error) {\r\n                setError(res.error);\r\n              }\r\n              if (res?.success) {\r\n                setSuccess(res.success);\r\n              }\r\n            })\r\n            .catch(() => {\r\n              setError(\"Something Went Wrong\");\r\n            });\r\n        } else {\r\n          setError(\"Passowrd Do Not Match\");\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      console.log(error);\r\n      setError(\"Something Went Wrong\");\r\n    } finally {\r\n      setIsPending(false);\r\n    }\r\n  }\r\n  return (\r\n    <Card className=\"bg-slate-950 border-none\">\r\n      <CardHeader>\r\n        <CardTitle className=\"text-gray-200 font-bold\">Security</CardTitle>\r\n        <CardDescription className=\"text-white/80 font-light\">\r\n          Manage you account security. Click save when you&apos;re done.\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-2\">\r\n        {type ? (\r\n          <>\r\n            <Form {...form}>\r\n              <form\r\n                onSubmit={form.handleSubmit(onSubmit)}\r\n                className=\"mt-5 flex w-full flex-col gap-9 \"\r\n              >\r\n                {type === \"Change Password\" && (\r\n                  <FormField\r\n                    control={form.control}\r\n                    name=\"oldPassword\"\r\n                    render={({ field }) => (\r\n                      <FormItem className=\"space-y-2\">\r\n                        <FormLabel className=\"font-semibold text-gray-200\">\r\n                          Old Password\r\n                        </FormLabel>\r\n                        <FormControl>\r\n                          <Input\r\n                            placeholder=\"Old Password\"\r\n                            type=\"password\"\r\n                            {...field}\r\n                            className=\"bg-slate-950 border-slate-700 text-gray-200 border\"\r\n                          />\r\n                        </FormControl>\r\n\r\n                        <FormMessage />\r\n                      </FormItem>\r\n                    )}\r\n                  />\r\n                )}\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"newPassword\"\r\n                  render={({ field }) => (\r\n                    <FormItem className=\"space-y-2\">\r\n                      <FormLabel className=\"font-semibold text-gray-200\">\r\n                        New Password\r\n                      </FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          placeholder=\"Type In Your New Password\"\r\n                          type=\"password\"\r\n                          {...field}\r\n                          className=\"bg-slate-950 border-slate-700 text-gray-200 border\"\r\n                        />\r\n                      </FormControl>\r\n\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"confirmNewPassword\"\r\n                  render={({ field }) => (\r\n                    <FormItem className=\"space-y-2\">\r\n                      <FormLabel className=\"font-semibold text-gray-200\">\r\n                        Confirm New Password\r\n                      </FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          placeholder=\"Please Confrim Your Password\"\r\n                          type=\"password\"\r\n                          {...field}\r\n                          className=\"bg-slate-950 border-slate-700 text-gray-200 border\"\r\n                        />\r\n                      </FormControl>\r\n\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <FormError message={error} />\r\n                <FormSuccess message={success} />\r\n                {!isPending ? (\r\n                  <Button\r\n                    type=\"submit\"\r\n                    className=\"w-full bg-white text-slate-900 hover:bg-white/85\"\r\n                    disabled={isPending}\r\n                  >\r\n                    Save\r\n                  </Button>\r\n                ) : (\r\n                  <div className=\"m-10\">\r\n                    <Loader color={\"white\"} />\r\n                  </div>\r\n                )}\r\n              </form>\r\n            </Form>\r\n            {/*TwoFactorToggle*/}\r\n          </>\r\n        ) : (\r\n          <Loader color=\"white\" />\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default SecuityContent;\r\n\r\n//[TwoFactorToggleClient]\r\n"
    }
  ],
  "type": "components:user"
}
