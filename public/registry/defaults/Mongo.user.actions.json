{
  "name": "Mongo.user.actions",

  "files": [
    {
      "name": "user.actions.ts",
      "imports": "",
      "content": "\"use server\";\nimport { connectToDatabase } from \"@/lib/database\";\nimport { currentUser } from \"@/lib/utils/currentUser\";\nimport User from \"@/models/user.model\";\nimport { revalidatePath } from \"next/cache\";\nimport bcrypt from \"bcryptjs\";\nimport { signOut } from \"@/auth\";\nimport * as z from \"zod\";\nimport { SetPasswordSchema, UpdateUserSchema } from \"@/validations\";\ntype updateUserImageProps = {\n  image: string;\n  path: string;\n};\nexport async function updateUserImage(params: updateUserImageProps) {\n  try {\n    const { image, path } = params;\n    connectToDatabase();\n    const userSession = await currentUser();\n    if (!userSession) {\n      return null;\n    }\n    const user = await User.findOne({ email: userSession?.email });\n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n    user.image = image;\n\n    await user.save();\n    userSession.image = image;\n    revalidatePath(path);\n  } catch (error) {\n    console.log(error);\n    throw error;\n  }\n}\n\nexport async function updateUserNameUser(\n  values: z.infer<typeof UpdateUserSchema>,\n  pathname: string,\n) {\n  try {\n    const validatedFields = UpdateUserSchema.safeParse(values);\n    if (!validatedFields.success) {\n      return { error: \"Something went wrong\" };\n    }\n    const { name } = values;    \n    connectToDatabase();\n    const userSession = await currentUser();\n    if (!userSession) {\n      return null;\n    }\n    const user = await User.findOneAndUpdate(\n      { email: userSession?.email },\n      {name: name},\n      { new: true },\n    );\n    if (!user) {\n      return { error: \"User not found\" };\n    }\n    userSession.name = user.name;\n    revalidatePath(pathname);\n    return { success: \"User updated\" };\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function setNewPassword(\n  values: z.infer<typeof SetPasswordSchema>,\n  email: string,\n  pathname: string,\n) {\n  try {\n    const validatedFields = SetPasswordSchema.safeParse(values);\n    if (!validatedFields.success) {\n      return { error: \"Something went wrong\" };\n    }\n    const { newPassword } = values;\n    connectToDatabase();\n    const user = await User.findOne({ email });\n    if (!user) {\n      return { error: \"User Not Found\" };\n    }\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\n    user.password = hashedPassword;\n    await user.save();\n    revalidatePath(pathname);\n    return {\n      success:\n        \"Password Created Now You can Login With Email & Password As Well\",\n    };\n  } catch (error) {\n    console.log(error);\n    return { error: \"Something Went Wrong\" };\n  }\n}\n\nexport async function changePassword(\n  values: z.infer<typeof SetPasswordSchema>,\n  email: string,\n  pathname: string,\n) {\n  try {\n    const validatedFields = SetPasswordSchema.safeParse(values);\n    if (!validatedFields.success) {\n      return { error: \"Something went wrong\" };\n    }\n    const { oldPassword, newPassword } = values;\n    if (!oldPassword) return { error: \"Please enter your old password\" };\n    connectToDatabase();\n    const user = await User.findOne({ email });\n\n    if (!user) {\n      return { error: \"User Not Found\" };\n    }\n    const isMatch = await bcrypt.compare(oldPassword, user.password);\n\n    if (!isMatch) {\n      return { error: \"Old password is incorrect\" };\n    }\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\n    user.password = hashedPassword;\n    await user.save();\n    revalidatePath(pathname);\n    return { success: \"Password Updated\" };\n  } catch (error) {\n    return { error: \"Something Went Wrong\" };\n  }\n}\n\nexport async function deleteUser(password: string) {\n  try {\n    connectToDatabase();\n    const userSession = await currentUser();\n\n    const user = await User.findOne({ email: userSession?.email });\n    if (!user) {\n      return { error: \"User not found\" };\n    }\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return { error: \"Password is incorrect\" };\n    }\n\n    await User.findOneAndDelete({ email: user.email });\n    await signOut();\n    return { success: \"User deleted successfully\" };\n  } catch (error) {\n    console.log(error);\n    throw error;\n  }\n}\n\n//[TwoFactorToggleServerAction]"
    }
  ],
  "type": "actions"
}
