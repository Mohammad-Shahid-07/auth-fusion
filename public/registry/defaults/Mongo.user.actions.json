{
  "name": "Mongo.user.actions",

  "files": [
    {
      "name": "user.actions.ts",
      "imports": "",
      "content": "\"use server\";\nimport { connectToDatabase } from \"@/lib/database\";\nimport { currentUser } from \"@/lib/utils/currentUser\";\nimport User from \"@/models/user.model\";\nimport { revalidatePath } from \"next/cache\";\nimport bcrypt from \"bcryptjs\";\nimport { signOut } from \"@/auth\";\nimport * as z from \"zod\";\nimport { SetPasswordSchema, UpdateUserSchema } from \"@/validations\";\ntype updateUserImageProps = {\n  image: string;\n  path: string;\n};\nexport async function updateUserImage(params: updateUserImageProps) {\n  try {\n    const { image, path } = params;\n    connectToDatabase();\n    const userSession = await currentUser();\n    if (!userSession) {\n      return null;\n    }\n    const user = await User.findOne({ email: userSession?.email });\n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n    user.image = image;\n\n    await user.save();\n    userSession.image = image;\n    revalidatePath(path);\n  } catch (error) {\n    console.log(error);\n    throw error;\n  }\n}\n\nexport async function updateUserNameUser(\n  values: z.infer<typeof UpdateUserSchema>,\n  pathname: string,\n) {\n  try {\n    const validatedFields = UpdateUserSchema.safeParse(values);\n    if (!validatedFields.success) {\n      return { error: \"Something went wrong\" };\n    }\n    const { name } = values;    \n    connectToDatabase();\n    const userSession = await currentUser();\n    if (!userSession) {\n      return null;\n    }\n    const user = await User.findOneAndUpdate(\n      { email: userSession?.email },\n      {name: name},\n      { new: true },\n    );\n    if (!user) {\n      return { error: \"User not found\" };\n    }\n    userSession.name = user.name;\n    revalidatePath(pathname);\n    return { success: \"User updated\" };\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function setNewPassword(\r\n  values: z.infer<typeof SetPasswordSchema>,\r\n) {\r\n  try {\r\n    const validatedFields = SetPasswordSchema.safeParse(values);\r\n    if (!validatedFields.success) {\r\n      return { error: \"Something went wrong\" };\r\n    }\r\n    const { newPassword } = values;\r\n    connectToDatabase();\r\n    const user = await currentUser();\r\n    if (!user) {\r\n      return { error: \"User Not Found\" };\r\n    }\r\n    const dbUser = await User.findOne({ email: user.email });\r\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n    dbUser.password = hashedPassword;\r\n    await dbUser.save();\r\n    return {\r\n      success:\r\n        \"Password Created Now You can Login With Email & Password As Well\",\r\n    };\r\n  } catch (error) {\r\n    console.log(error);\r\n    return { error: \"Something Went Wrong\" };\r\n  }\r\n}\r\n\r\nexport async function changePassword(\r\n  values: z.infer<typeof SetPasswordSchema>,\r\n) {\r\n  try {\r\n    const validatedFields = SetPasswordSchema.safeParse(values);\r\n    if (!validatedFields.success) {\r\n      return { error: \"Something went wrong\" };\r\n    }\r\n    const { oldPassword, newPassword } = values;\r\n    if (!oldPassword) return { error: \"Please enter your old password\" };\r\n    connectToDatabase();\r\n    const user = await currentUser();\r\n    if (!user) {\r\n      return { error: \"User Not Found\" };\r\n    }\r\n    const dbUser = await User.findOne({ email: user.email });\r\n    const isMatch = await bcrypt.compare(oldPassword, dbUser.password);\r\n\r\n    if (!isMatch) {\r\n      return { error: \"Old password is incorrect\" };\r\n    }\r\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n    dbUser.password = hashedPassword;\r\n    await dbUser.save();\r\n    return { success: \"Password Updated\" };\r\n  } catch (error) {\r\n    return { error: \"Something Went Wrong\" };\r\n  }\r\n}\n\nexport async function deleteUser(values: z.infer<typeof DeleteAccountSchema>) {\r\n  try {\r\n    connectToDatabase();\r\n    const userSession = await currentUser();\r\n    if (!userSession) {\r\n      return null;\r\n    }\r\n    const validatedFields = DeleteAccountSchema.safeParse(values);\r\n    if (!validatedFields.success) {\r\n      console.log(validatedFields);\r\n\r\n      return { error: \"Something went wrong\" };\r\n    }\r\n\r\n    const user = await User.findOne({ email: userSession?.email });\r\n    const { email, password } = values;\r\n    if (!user || user.email !== email) {\r\n      return { error: \"Email does not exist in our database\" };\r\n    }\r\n    if (user.password) {\r\n      const isMatch = await bcrypt.compare(password!, user.password);\r\n      if (!isMatch) {\r\n        return { error: \"Password is incorrect\" };\r\n      }\r\n      await User.findOneAndDelete({ email: user.email });\r\n    } else {\r\n      await User.findOneAndDelete({ email });\r\n    }\r\n\r\n    return { success: \"User deleted successfully\" };\r\n  } catch (error) {\r\n    console.log(error);\r\n    return { error: \"Something Went Wrong\" };\r\n  }\r\n}\r\n\n\n//[TwoFactorToggleServerAction]"
    }
  ],
  "type": "actions"
}



