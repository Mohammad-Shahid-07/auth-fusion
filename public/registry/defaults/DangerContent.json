{
  "name": "DangerContent",
  "files": [
    {
      "name": "DangerContent.tsx",
      "content": "\"use client\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogTrigger,\r\n} from \"@/components/ui/dialog\";\r\nimport { DeleteAccountSchema } from \"@/validations\";\r\nimport { deleteUser } from \"@/actions/user.actions\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport * as z from \"zod\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport { FormError } from \"@/components/auth/FormError\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { IUser } from \"@/models/user.model\";\r\nimport { signOut } from \"next-auth/react\";\r\n\r\nconst DangerContent = () => {\r\n  return (\r\n    <Card className=\"bg-slate-950 border-none\">\r\n      <CardHeader>\r\n        <CardTitle className=\"text-xl font-bold text-rose-500\">\r\n          Danger\r\n        </CardTitle>\r\n        <CardDescription className=\"text-white/80 font-light\">\r\n          Once you delete your account, there is no going back. Please be\r\n          certain.\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-2\">\r\n        <Dialog>\r\n          <DialogTrigger asChild>\r\n            <Button\r\n              variant=\"destructive\"\r\n              className=\"mt-5 bg-red-500 text-white\"\r\n            >\r\n              Delete Account\r\n            </Button>\r\n          </DialogTrigger>\r\n          <DialogContent className=\"sm:max-w-[425px] bg-slate-950 border-slate-800-foreground/20\">\r\n            <DialogHeader></DialogHeader>\r\n            <DeleteForm />\r\n          </DialogContent>\r\n        </Dialog>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nfunction DeleteForm({ className }: React.ComponentProps<\"form\">) {\r\n  const [user, setUser] = useState<IUser>({} as IUser);\r\n  const [isPending, setIsPending] = useState(false);\r\n  const [error, setError] = useState<string>(\"\");\r\n\r\n  useEffect(() => {\r\n    fetch(\"/api/user\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setUser(data);\r\n        setIsPending(false);\r\n      });\r\n  }, []);\r\n  const form = useForm<z.infer<typeof DeleteAccountSchema>>({\r\n    resolver: zodResolver(DeleteAccountSchema),\r\n    defaultValues: {\r\n      password: undefined,\r\n      email: undefined,\r\n    },\r\n  });\r\n\r\n  async function onSubmit(values: z.infer<typeof DeleteAccountSchema>) {\r\n    try {\r\n      setIsPending(true);\r\n      setError(\"\");\r\n      if (!values.password && !values.email) {\r\n        setError(\"Please enter your password or email\");\r\n        return;\r\n      }\r\n      const res = await deleteUser(values);\r\n      if (res?.error) {\r\n        setError(res.error);\r\n      }\r\n      if (res?.success) {\r\n        await signOut();\r\n      }\r\n    } catch (error) {\r\n      setError(\"Something Went Wrong\");\r\n    } finally {\r\n      setIsPending(false);\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <DialogTitle className=\"text-red-500\">Delete Account</DialogTitle>\r\n      <DialogDescription className=\"text-white/80 font-light\">\r\n        Please enter your{\" \"}\r\n        <span className=\"font-bold text-white\">{` ${\r\n          user.password ? \"password\" : \"email\"\r\n        }`}</span>{\" \"}\r\n        to confirm account deletion.\r\n      </DialogDescription>\r\n      <Form {...form}>\r\n        <form\r\n          onSubmit={form.handleSubmit(onSubmit)}\r\n          className={cn(\"grid items-start gap-4\", className)}\r\n        >\r\n          <FormField\r\n            control={form.control}\r\n            name={user.password ? \"password\" : \"email\"}\r\n            render={({ field }) => (\r\n              <FormItem className=\"space-y-3.5\">\r\n                <FormLabel className=\"font-bold text-white\">{` ${\r\n                  user.password ? \"Password\" : \"Email\"\r\n                }`}</FormLabel>\r\n                <FormControl>\r\n                  <Input\r\n                    placeholder={`Enter your ${\r\n                      user.password ? \"password\" : \"email\"\r\n                    }`}\r\n                    type={user.password ? \"password\" : \"email\"}\r\n                    {...field}\r\n                    className=\"bg-slate-950 border-slate-700 text-gray-200 border\"\r\n                  />\r\n                </FormControl>\r\n\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n          <FormError message={error} />\r\n          <Button\r\n            type=\"submit\"\r\n            disabled={isPending}\r\n            className=\" mb-2 rounded-lg bg-red-500  text-white \"\r\n          >\r\n            Delete Account\r\n          </Button>\r\n        </form>\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default DangerContent;\r\n"
    }
  ],
  "type": "components:user"
}
