{
  "name": "LoginForm",
  "files": [
    {
      "name": "LoginForm.tsx",
      "content": "import React, { useState, useTransition } from 'react';\nimport { CardWrapper } from '@/components/auth/CardWrapper';\nimport { useForm } from 'react-hook-form';\nimport { LoginSchema } from '@/validations';\nimport * as z from 'zod';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { FormError } from '@/components/auth/FormError';\nimport { FormSuccess } from '@/components/auth/FormSuccess';\nimport { LoginUser } from '@/lib/actions/auth.action';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useSearchParams } from 'next/navigation';\nimport Link from 'next/link';\n\nexport const LoginForm = () => {\n  const [showTwoFactor, setShowTwoFactor] = useState(false);\n  const [error, setError] = useState<string | undefined>('');\n  const [success, setSuccess] = useState<string | undefined>('');\n  const [isPending, startTransition] = useTransition();\n  const searchParams = useSearchParams();\n  const urlError =\n    searchParams.get('error') === 'OAuthAccountNotLinked'\n      ? 'Email aleady in use. Please login with diffrent Provider!'\n      : '';\n  const form = useForm<z.infer<typeof LoginSchema>>({\n    resolver: zodResolver(LoginSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  async function onSubmit(values: z.infer<typeof LoginSchema>) {\n    //[TwoFactorClient]\n    startTransition(() => {\n      LoginUser(values)\n        .then((res) => {\n          if (res?.error) {\n            form.reset();\n            setError(res?.error);\n          }\n          if (res?.success) {\n            form.reset();\n            setSuccess(res?.success!);\n          }\n        })\n        .catch((err) => {\n          setError(err?.message);\n        });\n    });\n  }\n  return (\n    <CardWrapper\n      headerLabel='Welcome back!'\n      BackButtonLabel=\"Don't have an account?\"\n      BackButtonHref='/register'\n      showSocial\n    >\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-8'>\n          <div className='space-y-6'>\n            <>\n              <FormField\n                control={form.control}\n                name='email'\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder='jogn.doe@example.com'\n                        type='email'\n                        disabled={isPending}\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name='password'\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder='password'\n                        disabled={isPending}\n                        type='password'\n                        {...field}\n                      />\n                    </FormControl>\n                    <Button\n                      variant='link'\n                      asChild\n                      className='px- font-normal'\n                      disabled={isPending}\n                    >\n                      <Link href='/reset'>Forgot Password?</Link>\n                    </Button>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </>\n          </div>\n          <FormError message={error || urlError} />\n          <FormSuccess message={success} />\n          <Button type='submit' className='w-full' disabled={isPending}>\n            Verify\n          </Button>\n        </form>\n      </Form>\n    </CardWrapper>\n  );\n};"
    }
  ],
  "type": "components:auth"
}
