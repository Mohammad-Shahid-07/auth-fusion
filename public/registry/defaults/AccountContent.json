{
  "name": "AccountContent",
  "files": [
    {
      "name": "AccountContent.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useState } from 'react';\r\nimport { ArrowRight } from 'lucide-react';\r\nimport Image from 'next/image';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Dialog, DialogContent, DialogTrigger } from '@/components/ui/dialog';\r\nimport { useForm } from 'react-hook-form';\r\nimport { UpdateUserSchema } from '@/validations';\r\nimport * as z from 'zod';\r\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\r\nimport { FormError } from '@/components/auth/FormError';\r\nimport { FormSuccess } from '@/components/auth/FormSuccess';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport ChooseAvatar from '@/components/user/ChooseAvatar';\r\nimport { updateUserNameUser } from '@/actions/user.actions';\r\nimport { usePathname } from 'next/navigation';\r\nimport { useSession } from \"next-auth/react\";\r\nimport { useCurrentUser } from '@/lib/utils/useCurrentUser';\r\nimport Loader from '@/components/auth/Loader';\r\n\r\nconst AccountContent = () => {\r\n  const [error, setError] = useState<string | undefined>('');\r\n  const [success, setSuccess] = useState<string | undefined>('');\r\n  const [isPending, setIsPending] = useState<boolean | undefined>(false);\r\n  const pathname = usePathname();\r\n  const { update } = useSession();\r\n  const user = useCurrentUser();\r\n\r\n  const form = useForm<z.infer<typeof UpdateUserSchema>>({\r\n    resolver: zodResolver(UpdateUserSchema),\r\n    defaultValues: {\r\n      name: user?.name || \"\",\r\n    },\r\n  });\r\n\r\n  async function onSubmit(values: z.infer<typeof UpdateUserSchema>) {\r\n    try {\r\n      setIsPending(true);\r\n      setSuccess(\"\");\r\n      setError(\"\");\r\n      if (\r\n        values.name === user?.name\r\n      )\r\n        return;\r\n\r\n      await updateUserNameUser(values, pathname)\r\n        .then((res) => {\r\n          if (res?.error) {\r\n            setError(res.error);\r\n          }\r\n          if (res?.success) {\r\n            setSuccess(res.success);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          setError(error);\r\n        });\r\n    } catch (error) {\r\n      setError('Something went wrong');\r\n    } finally {\r\n      setIsPending(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card className=\"bg-slate-800 border-none\">\r\n      <CardHeader>\r\n        <CardTitle className=\"text-white font-bold\">Account</CardTitle>\r\n        <CardDescription className=\"text-white/80 font-light\">\r\n          Make changes to your account here. Click save when you&apos;re done.\r\n        </CardDescription>\r\n      </CardHeader>\r\n      {form.getValues('name') ? (\r\n        <CardContent className=\"space-y-2\">\r\n          <Dialog>\r\n            <DialogTrigger>\r\n              <div className=\"flex w-full gap-28\">\r\n                <div className=\"rounded-full \">\r\n                  <Image\r\n                    src={user?.image!}\r\n                    alt=\"profile \"\r\n                    width={60}\r\n                    height={68}\r\n                    className=\"w-20 h-20 rounded-full\"\r\n                  />\r\n                </div>\r\n                <span className=\" flex gap-2 items-center justify-center text-white/75 hover:text-white \">\r\n                  Change Avatar <ArrowRight />\r\n                </span>\r\n              </div>\r\n            </DialogTrigger>\r\n            <DialogContent className=\"p-0 w-full border-none\">\r\n              <ChooseAvatar />\r\n            </DialogContent>\r\n          </Dialog>\r\n          <Form {...form}>\r\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\r\n              <div className=\"space-y-6 \">\r\n                <>\r\n                  <FormField\r\n                    control={form.control}\r\n                    name=\"name\"\r\n                    render={({ field }) => (\r\n                      <FormItem>\r\n                        <FormLabel>Name</FormLabel>\r\n                        <FormControl>\r\n                          <Input\r\n                            placeholder=\"name\"\r\n                            type=\"text\"\r\n                            disabled={isPending}\r\n                            {...field}\r\n                            className=\"no-focus bg-transparent border-slate-800/20 text-white\" \r\n                          />\r\n                        </FormControl>\r\n                        <FormMessage />\r\n                      </FormItem>\r\n                    )}\r\n                  />\r\n                </>\r\n              </div>\r\n              <FormError message={error} />\r\n              <FormSuccess message={success} />\r\n              <Button\r\n                type=\"submit\"\r\n                className=\"w-full text-white bg-slate-700\"\r\n                disabled={isPending}\r\n              >\r\n                Save\r\n              </Button>\r\n            </form>\r\n          </Form>\r\n        </CardContent>\r\n      ) : (\r\n        <div className=\"m-10\">\r\n          <Loader color={\"\"} />\r\n        </div>\r\n      )}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default AccountContent;"
    }
  ],
  "type": "components:user"
}
