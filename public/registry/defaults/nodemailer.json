{
  "name": "nodemailer",
  "files": [
    {
      "name": "mail.ts",
      "content": "\"use server\";\r\n//[imports]\r\nimport nodemailer from \"nodemailer\";\r\nimport {\r\n  resetTemplate,\r\n  verificationTemplate,\r\n} from \"./constant\";\r\n\r\nconst domain = process.env.NEXT_PUBLIC_BASE_URL || \"http://localhost:3000\";\r\nconst senderMail = process.env.NODEMAILER_EMAIL;\r\nconst transporter = nodemailer.createTransport({\r\n  pool: true,\r\n  service: \"hotmail\",\r\n  port: 2525,\r\n  auth: {\r\n    user: senderMail,\r\n    pass: process.env.NODEMAILER_EMAIL_PASSWORD,\r\n  },\r\n  maxConnections: 1,\r\n});\r\n\r\nconst renderTemplate = (\r\n  template: string,\r\n  replacements: { [key: string]: string },\r\n) => {\r\n  return template.replace(/{{(\\w+)}}/g, (_, key) => replacements[key]);\r\n};\r\n\r\nexport const sendVerificationEmail = async (\r\n  name: string,\r\n  email: string,\r\n  token: string,\r\n) => {\r\n  const confirmLink = `${domain}/verify-email?token=${token}`;\r\n  const html = renderTemplate(verificationTemplate, { name, confirmLink });\r\n  const mailOptions = {\r\n    from: senderMail,\r\n    to: email,\r\n    subject: \"Confirm your email\",\r\n    html,\r\n  };\r\n  await new Promise((resolve, reject) => {\r\n    transporter.sendMail(mailOptions, (error: any, info: any) => {\r\n      if (error) {\r\n        console.error(error);\r\n        reject(error);\r\n      } else {\r\n        resolve(info);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n//[TwoFactorMailNodeMailer]\r\n\r\nexport const sendResetEmail = async (\r\n  name: string,\r\n  email: string,\r\n  token: string,\r\n) => {\r\n  const resetLink = `${domain}/new-password?token=${token}`;\r\n  const html = renderTemplate(resetTemplate, { name, resetLink });\r\n  const mailOptions = {\r\n    from: senderMail,\r\n    to: email,\r\n    subject: \"Reset your password\",\r\n    html,\r\n  };\r\n  await new Promise((resolve, reject) => {\r\n    transporter.sendMail(mailOptions, (error: any, info: any) => {\r\n      if (error) {\r\n        console.error(error);\r\n        reject(error);\r\n      } else {\r\n        resolve(info);\r\n      }\r\n    });\r\n  });\r\n};\r\n"
    }
  ],
  "type": "lib"
}
