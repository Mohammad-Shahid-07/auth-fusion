{
  "name": "resend",
  "files": [
    {
      "name": "mail.ts",
      "content": "\"use server\";\r\n//[imports]\r\nimport { Resend } from \"resend\";\r\nimport {\r\n  resetTemplate,\r\n  verificationTemplate,\r\n} from \"./constant\";\r\nconst resend = new Resend(process.env.RESEND_SECRET);\r\n\r\nconst domain = process.env.NEXT_PUBLIC_APP_URL;\r\nconst renderTemplate = (\r\n  template: string,\r\n  replacements: { [key: string]: string },\r\n) => {\r\n  return template.replace(/{{(\\w+)}}/g, (_, key) => replacements[key]);\r\n};\r\n\r\n//[TwoFactorMailResend]\r\nexport const sendResetEmail = async (name : string, email: string,  token: string,) => {\r\n  const resetLink = `${domain}/new-password?token=${token}`\r\n  const html = renderTemplate(resetTemplate, { name, resetLink });\r\n  await resend.emails.send({\r\n    from: \"onboarding@resend.dev\",\r\n    to: email,\r\n    subject: \"Reset your password\",\r\n    html: html\r\n  });\r\n};\r\n\r\nexport const sendVerificationEmail = async (\r\n  name:stringl,  \r\n  email: string, \r\n  token: string\r\n) => {\r\n  const confirmLink = `${domain}/verify-email?token=${token}`;\r\n  const html = renderTemplate(verificationTemplate, { name, confirmLink });\r\n  await resend.emails.send({\r\n    from: \"onboarding@resend.dev\",\r\n    to: email,\r\n    subject: \"Confirm your email\",\r\n    html\r\n  });\r\n};"
    }
  ],
  "type": "lib"
}
