{
  "name": "user.actions.ts",
  "files": [
    {
      "name": "username",
      "imports": "",
      "content": "export async function updateUserNameUser(\n  values: z.infer<typeof UpdateUserSchema>,\n  pathname: string,\n) {\n  try {\n    const validatedFields = UpdateUserSchema.safeParse(values);\n    if (!validatedFields.success) {\n      return { error: \"Something went wrong\" };\n    }\n    const { name, username } = values;\n    if (!/^[a-zA-Z0-9_]+$/.test(username)) {\n      return { error: \"Username can only contain letters, numbers, and underscores\" };\n    }\n    connectToDatabase();\n    const userSession = await currentUser();\n    if (!userSession) {\n      return null;\n    }\n    // Check if the new username is already taken\n    const existingUsername = await User.findOne({ username });\n    if (existingUsername && existingUsername.email !== userSession.email) {\n      return { error: \"Username already taken\" };\n    }\n    const valuesToUpdate =\n      name === userSession.name ? { username } : { name, username };\n    const user = await User.findOneAndUpdate(\n      { email: userSession?.email },\n      valuesToUpdate,\n      { new: true },\n    );\n    if (!user) {\n      return { error: \"User not found\" };\n    }\n    userSession.name = user.name;\n    userSession.username = user.username;\n    revalidatePath(pathname);\n    return { success: \"User updated\" };\n  } catch (error) {\n    console.log(error);\n  }\n}",
      "comment": "export async function updateUserNameUser("
    },
    {
      "name": "twoFactorAuth",
      "imports": "",
      "content": "export async function TwoFactorSystem(params: {\r\n  path: string;\r\n  twoFactorEnabled: boolean;\r\n}) {\r\n  try {\r\n    connectToDatabase();\r\n    const { path, twoFactorEnabled } = params;\r\n    const userSession = await currentUser();\r\n    if (!userSession) {\r\n      return { error: \"User session not found\" };\r\n    }\r\n    const user = await User.findOne({ email: userSession.email });\r\n\r\n    if (!user) {\r\n      return { error: \"User not found\" };\r\n    }\r\n    if (user.password) {\r\n      user.twoFactorEnabled = twoFactorEnabled;\r\n      await user.save();\r\n      revalidatePath(path);\r\n      return {\r\n        success: `Two Factor Authentication is ${\r\n          user.twoFactorEnabled ? \"Enabled\" : \"Disabled\"\r\n        }`,\r\n      };\r\n    }\r\n    return {\r\n      error: \"Please Create a password to use  two factor authentication\",\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error in TwoFactorSystem:\", error);\r\n\r\n    throw error;\r\n  }\r\n}",

      "comment": "//[TwoFactorToggleServerAction]"
    }
  ]
}
