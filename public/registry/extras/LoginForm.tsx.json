{
  "name": "LoginForm",
  "files": [
    {
      "name": "credentials",
      "imports": "//[imports]\nimport React, { useState, useTransition } from \"react\";\nimport { CardWrapper } from \"@/components/auth/CardWrapper\";\nimport { useForm } from \"react-hook-form\";\nimport { LoginSchema } from \"@/validations\";\nimport * as z from \"zod\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"../ui/form\";\n\nimport { Button } from \"../ui/button\";\nimport { Input } from \"../ui/input\";\nimport { FormError } from \"../Form-Error\";\nimport { FormSuccess } from \"../Form-Sucess\";\nimport { LoginUser } from \"@/lib/actions/auth.action\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useSearchParams } from \"next/navigation\";\nimport Link from \"next/link\";\nimport error from \"next/error\";",
      "content": "\n//[TwoFactorState]\nconst [error, setError] = useState<string | undefined>(\"\");\nconst [success, setSuccess] = useState<string | undefined>(\"\");\nconst [isPending, startTransition] = useTransition();\nconst searchParams = useSearchParams();\nconst urlError =\n  searchParams.get(\"error\") === \"OAuthAccountNotLinked\"\n    ? \"Email aleady in use. Please login with diffrent Provider!\"\n    : \"\";\nconst form = useForm<z.infer<typeof LoginSchema>>({\n  resolver: zodResolver(LoginSchema),\n  defaultValues: {\n    email: \"\",\n    password: \"\",\n  },\n});\n\nconst formFieldLabels = {\n  //[UsernameLabel]\n  email: \"Email\",\n  type: \"email\",\n  placeholder: \"please enter your email\",\n};\n\nasync function onSubmit(values: z.infer<typeof LoginSchema>) {\n  //[TwoFactorOnSubmit]\n  startTransition(() => {\n    LoginUser(values)\n      .then((res) => {\n        if (res?.error) {\n          form.reset();\n          setError(res?.error);\n        }\n        if (res?.success) {\n          form.reset();\n          setSuccess(res?.success!);\n        }\n      })\n      .catch((err) => {\n        setError(err?.message);\n      });\n  });\n}\n\n \n   \n);\n",
      "comment": "//[CredentialsBaseFunctionalty]"
    },
    {
      "name": "credentials",
      "imports": "",
      "content": "<Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <div className=\"space-y-6\">\n         \n          <>\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>{formFieldLabels.email}</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder={formFieldLabels.placeholder}\n                      type={formFieldLabels.type}\n                      disabled={isPending}\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Password</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"password\"\n                      disabled={isPending}\n                      type=\"password\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <Button\n                    variant=\"link\"\n                    asChild\n                    className=\"px- font-normal\"\n                    disabled={isPending}\n                  >\n                    <Link href=\"/reset\">Forgot Password?</Link>\n                  </Button>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </>\n        </div>\n        <FormError message={error || urlError} />\n        <FormSuccess message={success} />\n      {/*[ShowTwoFactor]*/}\n <Button type=\"submit\" className=\"w-full\" disabled={isPending}>\n          Login\n        </Button>\n      </form>\n    </Form>\n    ;\n ",
      "comment": "{/*[CredentialsBase]*/}"
    },
    {
      "name": "twoFactorAuth",
      "imports": "",
      "content": "\nconst [showTwoFactor, setShowTwoFactor] = useState(false);",
      "comment": "//[TwoFactorState]"
    },
    {
      "name": "twoFactorAuth",
      "imports": "",
      "content": "\nstartTransition(() => {\n  LoginUser(values)\n    .then((res) => {\n      if (res?.error) {\n        form.reset();\n        setError(res?.error);\n      }\n      if (res?.success) {\n        form.reset();\n        setSuccess(res?.success!);\n      }\n      if (res?.twoFactor) {\n        setShowTwoFactor(true);\n      }\n    })\n    .catch((err) => {\n      setError(err?.message);\n    });\n});",
      "comment": "//[TwoFactorClient]"
    },
    {
      "name": "twoFactorAuth",
      "imports": "",
      "content": "\n<Button type=\"submit\" className=\"w-full\" disabled={isPending}>\n  {showTwoFactor ? \"Verify\" : \"Login\"}\n</Button>",
      "comment": "{/*[ShowTwoFactor]*/}"
    },

    {
      "name": "username",
      "imports": "",
      "content": "\nemail: \"Email\",\ntype: \"email\",\nplaceholder: \"please enter your email\"",
      "comment": "//[UsernameLabel]"
    }
  ]
}
