{
  "name": "LoginForm.tsx",
  "files": [
    {
      "name": "credentials",
      "imports": "import React, { useState, useTransition } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { LoginSchema } from \"@/validations\";\nimport * as z from \"zod\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { FormError } from \"@/components/auth/FormError\";\nimport { FormSuccess } from '@/components/auth/FormSuccess';\nimport { LoginUser } from \"@/actions/auth.actions\";\nimport { useMessageHandler } from \"../auth/useMessageHandler\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useSearchParams } from \"next/navigation\";\nimport Link from \"next/navigation\";\nimport error from \"next/error\";\nimport Loader from \"@/components/auth/Loader\";\n",
      "content": "export const LoginForm = () => {\r\n   //[TwoFactorState]\r\nconst [error, setError] = useState<string>(\"\");\r\nconst [success, setSuccess] = useState<string>(\"\");\r\nconst [isPending, startTransition] = useTransition();\r\nconst searchParams = useSearchParams();\r\nuseMessageHandler(\r\n    error,\r\n    success,\r\n    setError,\r\n    setSuccess,\r\n    Date.now().toLocaleString(),\r\n  );\r\nconst urlError =\r\n  searchParams.get(\"error\") === \"OAuthAccountNotLinked\"    ? \"Email aleady in use. Please login with diffrent Provider!\"    : \"\";\r\nconst form = useForm<z.infer<typeof LoginSchema>>({\r\n  resolver: zodResolver(LoginSchema),\r\n  defaultValues: {\r\n    email: \"\",\r\n    password: \"\",\r\n  },\r\n});\r\n\r\nconst formFieldLabels = {\r\n  label: \"Email\",\r\n  type: \"email\",\r\n  placeholder: \"jogn.doe@example.com\",\r\n};\r\n\r\nasync function onSubmit(values: z.infer<typeof LoginSchema>) {\r\n  setSuccess(\"\");\r\n  setError(\"\");\r\n  startTransition(() => {\r\n    LoginUser(values)\r\n      .then((res) => {\r\n        if (res?.error) {\r\n          form.reset();\r\n          setError(res?.error);\r\n        }\r\n        if (res?.success) {\r\n          form.reset();\r\n          setSuccess(res?.success!);\r\n        }\r\n        //[TwoFactorClientFunctionality]\r\n      })\r\n      .catch((err) => {\r\n        setError(err?.message);\r\n      });\r\n  });\r\n}\r\n\r\n\r\n //[showTwoFactor] \r\n  return (\r\n    <CardWrapper\r\n      headerLabel=\"Sign in to continue\"\r\n      BackButtonHref=\"/register\"\r\n      BackButtonLabel=\"Already have a account?\"\r\n      showSocial\r\n    >\r\n      <Form {...form}>\r\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\r\n          <div className=\"space-y-6\">\r\n            <>\r\n              <FormField\r\n                control={form.control}\r\n                name=\"email\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel>{formFieldLabels.label}</FormLabel>\r\n                    <FormControl>\r\n                      <Input\r\n                        placeholder={formFieldLabels.placeholder}\r\n                        type={formFieldLabels.type}\r\n                        disabled={isPending}\r\n                        {...field}\r\n                        className=\"w-full bg-slate-950 border-slate-700 text-gray-400 ring-0 focus:border-none focus:ring-0 border\"\r\n                      />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n              <FormField\r\n                control={form.control}\r\n                name=\"password\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel>Password</FormLabel>\r\n                    <FormControl>\r\n                      <Input\r\n                        placeholder=\"password\"\r\n                        disabled={isPending}\r\n                        type=\"password\"\r\n                        {...field}\r\n                        className=\"w-full bg-slate-950 border-slate-700 text-gray-400 ring-0 focus:border-none focus:ring-0 border\"\r\n                      />\r\n                    </FormControl>\r\n\r\n                    <FormMessage />\r\n                    <Button\r\n                      variant=\"link\"\r\n                      asChild\r\n                      className=\"px-1 font-normal\"\r\n                      disabled={isPending}\r\n                    >\r\n                      <Link href=\"/reset\" className=\"text-white\">\r\n                        Forgot Password?\r\n                      </Link>\r\n                    </Button>\r\n                  </FormItem>\r\n                )}\r\n              />\r\n            </>\r\n          </div>\r\n          <FormError message={error || urlError} />\r\n          <FormSuccess message={success} />\r\n          {isPending ? (\r\n            <Loader color=\"white\" />\r\n          ) : (\r\n            <Button\r\n              type=\"submit\"\r\n              className=\"w-full bg-white text-slate-900 hover:bg-white/85\"\r\n              disabled={isPending}\r\n            >\r\n              Login\r\n            </Button>\r\n          )}\r\n        </form>\r\n      </Form>\r\n    </CardWrapper>\r\n  );\r\n };",
      "comment": "export const LoginForm = () => {"
    },
    {
      "name": "twoFactorAuth",
      "imports": "",
      "content": "const [showTwoFactor, setShowTwoFactor] = useState(false);",
      "comment": "//[TwoFactorState]"
    },

    {
      "name": "twoFactorAuth",
      "imports": "",
      "content": "if (res?.twoFactor) {\n        setShowTwoFactor(true);\n      } ",
      "comment": "//[TwoFactorClientFunctionality]"
    },
    {
      "name": "twoFactorAuth",
      "imports": "",
      "content": "if (showTwoFactor) {\r\n  return (\r\n    <CardWrapper\r\n      headerLabel=\"Welcome back!\"\r\n      BackButtonLabel=\"Don't have an account?\"\r\n      BackButtonHref=\"/register\"\r\n      showSocial\r\n    >\r\n      <Form {...form}>\r\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\r\n          <div className=\"space-y-6\">\r\n            <FormField\r\n              control={form.control}\r\n              name=\"code\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Code</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      placeholder=\"123456\"\r\n                      type=\"number\"\r\n                      disabled={isPending}\r\n                      {...field}\r\n                      className=\"w-full bg-slate-950 border-slate-700 text-gray-400 ring-0 focus:border-none focus:ring-0 border\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n          </div>\r\n          <FormError message={error || urlError} />\r\n          <FormSuccess message={success} />\r\n          <Button\r\n            type=\"submit\"\r\n            className=\"w-full bg-white text-slate-900 hover:bg-white/85\"\r\n            disabled={isPending}\r\n          >\r\n            Verify\r\n          </Button>\r\n        </form>\r\n      </Form>\r\n    </CardWrapper>\r\n  );\r\n}",
      "comment": "//[showTwoFactor]"
    },

    {
      "name": "username",
      "imports": "",
      "content": "const formFieldLabels = {\n  label: \"Email or Username\",\n  type: \"text\",\n  placeholder: \"email or username\",\n};",
      "comment": "const formFieldLabels"
    }
  ]
}
