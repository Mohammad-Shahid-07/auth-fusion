{
  "name": "user.actions.ts",
  "files": [
    {
      "name": "username",
      "imports": "",
      "content": "export async function updateUserNameUser(\n  values: z.infer<typeof UpdateUserSchema>,\n  pathname: string,\n) {\n  try {\n    const validatedFields = UpdateUserSchema.safeParse(values);\n    if (!validatedFields.success) {\n      return { error: \"Please provide a valid email and password\" };\n    }\n    const { name, username } = values;\n    const userSession = await currentUser();\n    if (!userSession) {\n      return null;\n    }\n\n    // Check if the new username is already taken\n    const existingUser = await database.user.findUnique({\n      where: { username },\n    });\n\n    if (existingUser && existingUser.id !== userSession.id) {\n      return { error: \"Username already taken\" };\n    }\n\n    const dataToUpdate: { name: string; username?: string } =\n      name === userSession.name ? { username } : { name, username };\n\n    const updatedUser = await database.user.update({\n      where: {\n        email: userSession.email!,\n      },\n      data: dataToUpdate,\n    });\n\n    if (!updatedUser) {\n      return { error: \"User not found\" };\n    }\n\n    userSession.name = updatedUser.name;\n    userSession.username = updatedUser.username;\n\n    revalidatePath(pathname);\n\n    return { success: \"User updated\" };\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}",
      "comment": "export async function updateUserNameUser(\n  values: z.infer<typeof UpdateUserSchema>,\n  pathname: string,\n) {"
    },
    {
      "name": "twoFactorAuth",
      "imports": "",
      "content": "export async function TwoFactorSystem(params: {\n  path: string;\n  twoFactorEnabled: boolean;\n}) {\n  try {\n    connectToDatabase();\n    const { path, twoFactorEnabled } = params;\n    const userSession = await currentUser();\n    if (!userSession) {\n      return { error: \"User session not found\" };\n    }\n    const user = await User.findOne({ email: userSession.email });\n\n    if (!user) {\n      return { error: \"User not found\" };\n    }\n    if (user.password) {\n      user.twoFactorEnabled = twoFactorEnabled;\n      await user.save();\n      revalidatePath(path);\n    }\n\n    return {\n      success: `Two Factor Authentication is ${\n        user.twoFactorEnabled ? \"Enabled\" : \"Disabled\"\n      }`,\n    };\n  } catch (error) {\n      console.error(\"Error in TwoFactorSystem:\", error);\n\n    throw error;\n  }\n}",
      "comment": "//[TwoFactorToggleServerAction]"
    }
  ]
}
