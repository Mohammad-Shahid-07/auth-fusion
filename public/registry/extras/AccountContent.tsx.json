{
  "name": "AccountContent.tsx",
  "files": [
    {
      "name": "username",
      "imports": "",
     "content": "const AccountContent = () => {\r\n  const [error, setError] = useState<string | undefined>(\"\");\r\n  const [success, setSuccess] = useState<string | undefined>(\"\");\r\n  const [isPending, setIsPending] = useState<boolean | undefined>(false);\r\n  const pathname = usePathname();\r\n  const { update } = useSession();\r\n  const user = useCurrentUser();\r\n\r\n  const form = useForm<z.infer<typeof UpdateUserSchema>>({\r\n    resolver: zodResolver(UpdateUserSchema),\r\n    defaultValues: {\r\n      name: user?.name || \"\",\r\n      username: user?.username || \"\",\r\n    },\r\n  });\r\n\r\n  async function onSubmit(values: z.infer<typeof UpdateUserSchema>) {\r\n    try {\r\n      setIsPending(true);\r\n      setSuccess(\"\");\r\n      setError(\"\");\r\n      if (values.name === user?.name && values.username === user?.username) {\r\n        return setError(\"Please change values to update them.\");\r\n      }\r\n\r\n      if (!/^[a-zA-Z0-9_]+$/.test(values.username)) {\r\n        return setError(\r\n          \"Username can only contain letters, numbers, and underscores\",\r\n        );\r\n      }\r\n      await updateUserNameUser(values, pathname)\r\n        .then((res) => {\r\n          if (res?.error) {\r\n            setError(res.error);\r\n          }\r\n          if (res?.success) {\r\n            setSuccess(res.success);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          setError(error);\r\n        });\r\n      await update();\r\n    } catch (error) {\r\n      setError(\"Something went wrong\");\r\n    } finally {\r\n      setIsPending(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"text-gray-200 font-bold\">Account</CardTitle>\r\n        <CardDescription className=\"text-slate-700\">\r\n          Make changes to your account here. Click save when you&apos;re done.\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-2\">\r\n        <Dialog>\r\n          <DialogTrigger>\r\n            <div className=\"flex w-full gap-28\">\r\n              <div className=\"rounded-full \">\r\n                <Image\r\n                  src={user?.image}\r\n                  alt=\"profile \"\r\n                  width={60}\r\n                  height={68}\r\n                  className=\"w-20 h-20 rounded-full\"\r\n                />\r\n              </div>\r\n              <span className=\" flex gap-2 items-center justify-center text-gray-800 hover:text-black\">\r\n                Change Avatar <ArrowRight />\r\n              </span>\r\n            </div>\r\n          </DialogTrigger>\r\n          <DialogContent className=\"p-0 w-full border-none\">\r\n            <ChooseAvatar />\r\n          </DialogContent>\r\n        </Dialog>\r\n        <Form {...form}>\r\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\r\n            <div className=\"space-y-6 \">\r\n              <>\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"username\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel className=\"font-semibold text-gray-200\">\r\n                        username\r\n                      </FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          placeholder=\"username\"\r\n                          type=\"text\"\r\n                          disabled={isPending}\r\n                          {...field}\r\n                          className=\"bg-slate-950 border-slate-700 text-gray-200 border\"\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"name\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel className=\"font-semibold text-gray-200\">\r\n                        Name\r\n                      </FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          placeholder=\"name\"\r\n                          type=\"text\"\r\n                          disabled={isPending}\r\n                          {...field}\r\n                          className=\"bg-slate-950 border-slate-700 text-gray-200 border\"\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </>\r\n            </div>\r\n            <FormError message={error} />\r\n            <FormSuccess message={success} />\r\n            {!isPending ? (\r\n              <Button\r\n                type=\"submit\"\r\n                className=\"w-full text-white bg-slate-800\"\r\n                disabled={isPending}\r\n              >\r\n                Save\r\n              </Button>\r\n            ) : (\r\n              <div className=\"m-10\">\r\n                <Loader color={\"white\"} />\r\n              </div>\r\n            )}\r\n          </form>\r\n        </Form>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n",      "comment": "const AccountContent = () => {"
    }
  ]
}
