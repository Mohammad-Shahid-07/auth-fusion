{
  "name": "loginWithCredentials",
  "function": [
    {
      "name": "base-form",
      "content": [
        "export async function LoginUser(values: z.infer<typeof LoginSchema>) {\n    try {\n      connectToDatabase();\n  \n      const validatedFields = LoginSchema.safeParse(values);\n      if (!validatedFields.success) {\n        return { error: \"Please provide a valid email and password\" };\n      }\n    // [TemplateReplacement] email or username\n      const { email, password } = validatedFields.data;\n      const callbackUrl = \"/\";\n      // email or username\n      const existingUser = await User.findOne({ email });\n      if (!existingUser || !existingUser.email || !existingUser.password) {\n        return { error: \"User not found\" };\n      }\n      if (!existingUser.emailVerified) {\n        const Verificationtoken = await geterateVerificationToken(email);\n        await sendVerificationEmail(\n          Verificationtoken.email,\n          Verificationtoken.token,\n        );\n        return { success: \"Confimation email sent\" };\n      }\n  \n      await signIn(\"credentials\", {\n        email: existingUser.email,\n        password,\n        redirectTo: callbackUrl || DEFAULT_LOGIN_REDIRECT,\n      });\n    } catch (error) {\n      if (error instanceof AuthError) {\n        switch (error.type) {\n          case \"CredentialsSignin\":\n            return { error: \"Invalid credentials!\" };\n          default:\n            return { error: \"Something went wrong!\" };\n        }\n      }\n  \n      throw error;\n    }\n  }"
      ],
      "override": true
    },

    {
      "name": "username",
      "content": [
        {
          "name": "username",
          "content": "// [TemplateReplacement] username\n const existingUser = await User.findOne({ $or: [{ email }, { username :email }] });"
        }
      ],
      "override": false
    },
    {
      "name": "2fa",
      "content": [
        {
          "name": "2faOne",
          "content": "// [TemplateReplacement] 2fa\n const { email, password, code } = validatedFields.data; "
        },
        {
          "name": "2faTwo",
          "content": "// [TemplateReplacement] 2fa\n if (existingUser.twoFactorEnabled && existingUser.email) {\n        if (code) {\n          const twoFactorToken = await TwoFactorToken.findOne({ token: code });\n  \n          if (!twoFactorToken || twoFactorToken.token !== code) {\n            return { error: \"Invalid code\" };\n          }\n          if (twoFactorToken.expiresAt.getTime() < new Date().getTime()) {\n            return { error: \"Code expired\" };\n          }\n  \n          await twoFactorToken.deleteOne();\n          const existingConfimation = await TwoFactorConfimation.findOne({\n            _id: existingUser._id,\n          });\n  \n          if (existingConfimation) {\n            await existingConfimation.deleteOne();\n          }\n          await TwoFactorConfimation.create({\n            user: existingUser._id,\n            expiresAt: new Date(new Date().getTime() + 60 * 60 * 1000),\n          });\n        } else {\n          const twoFactorToken = await generateTwoFactorToken(existingUser.email);\n          await sendTwoFactorEmail(existingUser.email, twoFactorToken.token);\n  \n          return { twoFactor: true };\n        }\n      }"
        }
      ],
      "override": false
    }
  ],

  "type": "actions"
}
